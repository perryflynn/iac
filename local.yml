---
- name: Setup my old retired laptop
  hosts: isos

  tasks:

    - &prepare_environment
      name: Prepare environment
      block:

        - name: Check if hostname is known
          assert:
            that:
              - hostname in bootstrapparameters

        - name: Decleare bootstrap parameters
          set_fact: { "{{item[0]}}": "{{item[1]}}" }
          loop: "{{bootstrapparameters[hostname].items()}}"

        - name: Check bootstrap parameters
          assert:
            that:
              - bootmode == 'uefi' or bootmode == 'bios'
              - flavor in [ 'debian', 'ubuntu', 'archlinux' ]
              - diskdev is defined and diskdev is string and (diskdev|length) > 0

        - name: Show bootstrap parameters to use
          debug:
            var: |
              {
                'hostname': hostname,
                'bootmode': bootmode,
                'flavor': flavor,
                'diskdev': diskdev
              }

    - name: Give the user time to check the shown parameters
      pause:
        seconds: 30

    - name: Set timezone
      timezone:
        name: "{{timezone}}"

    - name: Set locale
      locale_gen:
        name: en_US.UTF-8

    # -> Partition Disk

    - name: Create BIOS boot partition
      parted:
        device: "{{diskdev}}"
        label: gpt
        number: 1
        name: biosboot-svrlsiac
        flags: [ bios_grub ]
        part_end: 8MiB
        state: present
      when: bootmode == 'bios'

    - name: Create UEFI boot partition
      parted:
        device: "{{diskdev}}"
        label: gpt
        number: 1
        name: uefiboot-svrlsiac
        flags: [ esp ]
        part_end: 512MiB
        state: present
      when: bootmode == 'uefi'

    - name: Create root partition
      parted:
        device: "{{diskdev}}"
        label: gpt
        number: 2
        name: root-svrlsiac
        part_start: "{{ '512MiB' if bootmode == 'uefi' else '8MiB' }}"
        part_end: 100%
        state: present

    - name: Ensure chroot folder
      file:
        path: "{{chrootmountpoint}}"
        owner: root
        group: root
        mode: u=rwx,go=rx
        state: directory

    - name: Ensure chroot is unmounted
      include_role:
        name: chrootsetup
        tasks_from: uninstall
      vars:
        chrootdevice: "{{'/dev/disk/by-partlabel/root-svrlsiac' | realpath }}"
        efibootdevice: "{{ ('/dev/disk/by-partlabel/uefiboot-svrlsiac' | realpath) if bootmode == 'uefi' else '' }}"
        efipath: "{{ '/efi' if flavor == 'archlinux' else '/boot/efi' }}"

    - name: Format root partition
      filesystem:
        dev: "{{'/dev/disk/by-partlabel/root-svrlsiac' | realpath }}"
        fstype: ext4
        force: true

    - name: Format UEFI boot partition
      filesystem:
        dev: "{{'/dev/disk/by-partlabel/uefiboot-svrlsiac' | realpath }}"
        fstype: vfat
        force: true
      when: bootmode == 'uefi'

    - name: Mount root partition
      mount:
        src: "{{'/dev/disk/by-partlabel/root-svrlsiac' | realpath }}"
        path: "{{chrootmountpoint}}"
        fstype: ext4
        state: ephemeral

    # -> Bootstrap root filesystem

    - name: Run pacstrap for Arch Linux
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          pacstrap -K {{chrootmountpoint}} base linux linux-firmware bash grub efibootmgr
      when: flavor == 'archlinux'

    - name: Run debootstrap for Debian
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          debootstrap --variant=minbase --arch amd64 bookworm {{chrootmountpoint}} http://deb.debian.org/debian/
      when: flavor == 'debian'

    - name: Run debootstrap for Ubuntu
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          debootstrap --variant=minbase --no-check-certificate --arch amd64 noble {{chrootmountpoint}} http://de.archive.ubuntu.com/ubuntu/
      when: flavor == 'ubuntu'

    # -> Customizations to make networking work for proxies / corporate CAs

    - name: Ensure environment variables
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          cp /etc/environment {{chrootmountpoint}}/etc/environment

    - name: Ensure resolv.conf
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          cp /etc/resolv.conf {{chrootmountpoint}}/etc/resolv.conf

    - name: Ensure TLS certificates on Arch Linux systems
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          cat /etc/ca-certificates/trust-source/anchors/*.crt >> {{chrootmountpoint}}/etc/ssl/certs/ca-certificates.crt || true
          mkdir -p {{chrootmountpoint}}/etc/ca-certificates/trust-source/anchors
          cp /etc/ca-certificates/trust-source/anchors/*.crt {{chrootmountpoint}}/etc/ca-certificates/trust-source/anchors || true
      when: flavor == 'archlinux'

    - name: Ensure TLS certificates on Debian/Ubuntu systems
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          cat /etc/ca-certificates/trust-source/anchors/*.crt >> {{chrootmountpoint}}/etc/ssl/certs/ca-certificates.crt || true
          mkdir -p {{chrootmountpoint}}/usr/local/share/ca-certificates
          cp /etc/ca-certificates/trust-source/anchors/*.crt {{chrootmountpoint}}/usr/local/share/ca-certificates || true
      when: flavor in [ 'debian', 'ubuntu' ]

    # -> Prepare chroot for second stage

    - name: Ensure chroot is mounted
      include_role:
        name: chrootsetup
        tasks_from: install
      vars:
        chrootdevice: "{{'/dev/disk/by-partlabel/root-svrlsiac' | realpath }}"
        efibootdevice: "{{ ('/dev/disk/by-partlabel/uefiboot-svrlsiac' | realpath) if bootmode == 'uefi' else '' }}"
        efipath: "{{ '/efi' if flavor == 'archlinux' else '/boot/efi' }}"

    - name: Generate fstab file
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          genfstab -U {{chrootmountpoint}} >> {{chrootmountpoint}}/etc/fstab

    # -> Install additional packages to make ansible chroot work

    - name: Update package sources for Debian/Ubuntu Systems
      include_role:
        name: sourceslist
        defaults_from: "{{flavor}}-{{codename}}"
      vars:
        sourcesfileprefix: "{{chrootmountpoint}}"
      when: flavor in [ 'ubuntu', 'debian' ]

    - name: Install Ansible in chroot for Arch Linux systems
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          chroot {{chrootmountpoint}} /bin/bash -c "pacman --noconfirm --needed -Sy git ansible curl ca-certificates"
      when: flavor == 'archlinux'

    - name: Install Ansible in chroot for Ubuntu/Debian systems
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          chroot {{chrootmountpoint}} /bin/bash -c "apt update && apt install -y git ansible curl ca-certificates"
      when: flavor in [ 'debian', 'ubuntu' ]

- name: Continue setup in chroot
  hosts: chroots

  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  tasks:

    - *prepare_environment

    - name: Create hostname file
      copy:
        dest: /etc/hostname
        owner: root
        group: root
        mode: u=rw,go=r
        content: |
          {{hostname}}

    # -> Install additional packages

    - name: Install additional software for Debian/Ubuntu Systems
      apt:
        name: "{{additionalpackages}}"
        force_apt_get: true
        update_cache: true
      when: flavor in [ 'ubuntu', 'debian' ]

    - name: Install additional software for Arch Linux Systems
      pacman:
        name: "{{additionalpackages}}"
        update_cache: true
      when: flavor == 'archlinux'

    # -> Configure OS-specific things

    - name: Configure Arch Linux System
      block:

        - name: Set timezone
          file:
            src: /usr/share/zoneinfo/{{timeregion}}/{{timecity}}
            dest: /etc/localtime
            owner: root
            group: root
            state: link

        - name: Run hwclock
          shell:
            executable: /bin/bash
            cmd: 'hwclock --systohc'

        - name: Enable locales
          ansible.builtin.lineinfile:
            path: /etc/locale.gen
            regexp: '^#?{{localelong}}'
            line: '{{localelong}}'

        - name: Run locale-gen
          shell:
            executable: /bin/bash
            cmd: 'locale-gen'

        - name: Create locale.conf
          copy:
            dest: /etc/locale.conf
            owner: root
            group: root
            mode: u=rw,go=r
            content: |
              LANG={{locale}}

        - name: Create vconsole.conf
          copy:
            dest: /etc/vconsole.conf
            owner: root
            group: root
            mode: u=rw,go=r
            content: |
              KEYMAP={{vconsolekeymap}}

      when: flavor == 'archlinux'

    - name: Configure Debian/Ubuntu System
      block:

        # - name: Configure grub package
        #   shell:
        #     executable: /bin/bash
        #     cmd: |
        #       debconf-set-selections <<< "grub-efi-amd64 grub2/update_nvram boolean false"

        - name: Install Debian Linux Kernel
          apt:
            name:
              - linux-image-generic
              - linux-headers-generic
              - intel-microcode
              - amd64-microcode
              - firmware-linux
          when: flavor == 'debian'

        - name: Install Debian/Ubuntu Linux Kernel
          apt:
            name: linux-generic
          when: flavor == 'ubuntu'

        - name: Install Grub for BIOS on Debian/Ubuntu
          apt:
            name: grub2
          when: bootmode == 'bios'

        - name: Install Grub for UEFI on Debian/Ubuntu
          apt:
            name: grub-efi
          when: bootmode == 'uefi'

      when: flavor in [ 'debian', 'ubuntu' ]

    # -> Root Account

    - name: Set root password
      user:
        name: root
        password: '{{rootpassword}}'
        update_password: always

    - name: Set ssh keys for root account and delete existing if necessary
      authorized_key:
        user: root
        key: "{{rootsshkeys|join('\n')}}"
        exclusive: true

    # -> Bootloader

    - name: Configure verbose boot output in bootloader for Arch Linux
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"'
      when: flavor == 'archlinux'

    - name: Install bootloader in BIOS mode for Arch Linux
      shell:
        executable: /bin/bash
        cmd: |
          grub-install --target=i386-pc {{diskdev}}
          grub-mkconfig -o /boot/grub/grub.cfg
      when: flavor == 'archlinux' and bootmode == 'bios'

    - name: Install bootloader in UEFI mode for Arch Linux
      shell:
        executable: /bin/bash
        cmd: |
          grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB --no-nvram --removable
          grub-mkconfig -o /boot/grub/grub.cfg
      when: flavor == 'archlinux' and bootmode == 'uefi'

    - name: Install bootloader in BIOS mode for Debian/Ubuntu
      shell:
        executable: /bin/bash
        cmd: |
          grub-install --target=i386-pc {{diskdev}}
          update-grub
      when: flavor in [ 'debian', 'ubuntu' ] and bootmode == 'bios'

    - name: Install bootloader in UEFI mode for Debian/Ubuntu
      shell:
        executable: /bin/bash
        cmd: |
          grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=debian --recheck --no-nvram --removable
          update-grub
      when: flavor in [ 'debian', 'ubuntu' ] and bootmode == 'uefi'

    # - name: Enable networkmanager
    #   systemd_service:
    #     enabled: true
    #     name: NetworkManager

    - name: Enable ssh
      systemd_service:
        enabled: true
        name: "{{ 'sshd' if flavor == 'archlinux' else 'ssh' }}"

    # - name: Add ansible apply script to OS
    #   template:
    #     src: files/perrys-ansible-apply.sh.j2
    #     dest: "{{selfapplyscript}}"
    #     owner: root
    #     group: root
    #     mode: u=rwx,g=rx,o=r

    # - name: Add service to run ansible on boot
    #   template:
    #     src: files/perrys-ansible-apply.service.j2
    #     dest: /etc/systemd/system/perrys-ansible-apply.service
    #     owner: root
    #     group: root
    #     mode: u=rwx,g=rx,o=r

    # - name: Enable ansible apply on first boot
    #   systemd_service:
    #     enabled: true
    #     daemon_reload: yes
    #     name: perrys-ansible-apply
