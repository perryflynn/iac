---
- name: Setup my old retired laptop
  hosts: archiso

  tasks:

    - name: Check parameters
      assert:
        that:
          - bootmode == 'uefi' or bootmode == 'bios'
          - flavor == 'debian' or flavor == 'archlinux'

    - name: Set timezone
      timezone:
        name: "{{timezone}}"

    - name: Set locale
      locale_gen:
        name: "{{locale}}"

    - name: Install required packages
      package:
        name: "{{item}}"
      loop:
        - parted
        - dosfstools
        - e2fsprogs
        - bash
        - debootstrap

    - name: Create BIOS boot partition
      parted:
        device: "{{diskdev}}"
        label: gpt
        number: 1
        name: biosboot-svrlsiac
        flags: [ bios_grub ]
        part_end: 8MiB
        state: present
      when: bootmode == 'bios'

    - name: Create UEFI boot partition
      parted:
        device: "{{diskdev}}"
        label: gpt
        number: 1
        name: uefiboot-svrlsiac
        flags: [ esp ]
        part_end: 512MiB
        state: present
      when: bootmode == 'uefi'

    - name: Create root partition
      parted:
        device: "{{diskdev}}"
        label: gpt
        number: 2
        name: root-svrlsiac
        part_start: "{{ '512MiB' if bootmode == 'uefi' else '8MiB' }}"
        part_end: 100%
        state: present

    - name: Ensure chroot is unmounted
      include_role:
        name: chrootsetup
        tasks_from: uninstall
      vars:
        chrootdevice: "{{'/dev/disk/by-partlabel/root-svrlsiac' | realpath }}"
        efibootdevice: "{{ ('/dev/disk/by-partlabel/uefiboot-svrlsiac' | realpath) if bootmode == 'uefi' else '' }}"

    - name: Format root partition
      filesystem:
        dev: "{{'/dev/disk/by-partlabel/root-svrlsiac' | realpath }}"
        fstype: ext4
        force: true

    # - name: Format UEFI boot partition
    #   shell:
    #     executable: /bin/bash
    #     cmd: |
    #       # TODO: ansible filesystem task is not supporting fat/fat32
    #       mkfs.fat -F 32 {{'/dev/disk/by-partlabel/uefiboot-svrlsiac' | realpath }}
    #   when: bootmode == 'uefi'

    - name: Format UEFI boot partition
      filesystem:
        dev: "{{'/dev/disk/by-partlabel/uefiboot-svrlsiac' | realpath }}"
        fstype: vfat
        force: true
      when: bootmode == 'uefi'

    - name: Mount root partition
      mount:
        src: "{{'/dev/disk/by-partlabel/root-svrlsiac' | realpath }}"
        path: "{{chrootmountpoint}}"
        fstype: ext4
        state: ephemeral

    - name: Run pacstrap for Arch Linux
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          pacstrap -K {{chrootmountpoint}} base linux linux-firmware bash grub efibootmgr {{additionalpackages.archlinux|join(' ')}}
      when: flavor == 'archlinux'

    - name: Run debootstrap for Debian
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          debootstrap --variant=minbase --resolve-deps --arch amd64 bookworm --include={{additionalpackages.debian|join(',')}} {{chrootmountpoint}} http://deb.debian.org/debian/
      when: flavor == 'debian'

    - name: Run genfstab
      shell:
        chdir: /
        executable: /bin/bash
        cmd: |
          genfstab -U {{chrootmountpoint}} >> {{chrootmountpoint}}/etc/fstab

    - name: Ensure chroot is mounted
      include_role:
        name: chrootsetup
        tasks_from: install
      vars:
        chrootdevice: "{{'/dev/disk/by-partlabel/root-svrlsiac' | realpath }}"
        efibootdevice: "{{ ('/dev/disk/by-partlabel/uefiboot-svrlsiac' | realpath) if bootmode == 'uefi' else '' }}"

- name: Continue setup in chroot
  hosts: /mnt

  tasks:

    - name: Configure Arch Linux System
      block:

        - name: Set timezone
          file:
            src: /usr/share/zoneinfo/{{timeregion}}/{{timecity}}
            dest: /etc/localtime
            owner: root
            group: root
            state: link

        - name: Run hwclock
          shell:
            executable: /bin/bash
            cmd: 'hwclock --systohc'

        - name: Enable locales
          ansible.builtin.lineinfile:
            path: /etc/locale.gen
            regexp: '^#?{{localelong}}'
            line: '{{localelong}}'

        - name: Run locale-gen
          shell:
            executable: /bin/bash
            cmd: 'locale-gen'

        - name: Create locale.conf
          copy:
            dest: /etc/locale.conf
            owner: root
            group: root
            mode: u=rw,go=r
            content: |
              LANG={{locale}}

        - name: Create vconsole.conf
          copy:
            dest: /etc/vconsole.conf
            owner: root
            group: root
            mode: u=rw,go=r
            content: |
              KEYMAP={{vconsolekeymap}}

      when: flavor == 'archlinux'

    - name: Configure Debian System
      block:

        - name: Configure grub package
          shell:
            executable: /bin/bash
            cmd: |
              debconf-set-selections <<< "grub-efi-amd64 grub2/update_nvram boolean false"

        - name: Remove packages
          apt:
            state: absent
            name:
              - grub-efi
              - grub-efi-amd64

        - name: Install packages
          apt:
            name:
              - linux-image-amd64
              - linux-headers-amd64
              - grub-efi

      when: flavor == 'debian'

    - name: Create hostname file
      copy:
        dest: /etc/hostname
        owner: root
        group: root
        mode: u=rw,go=r
        content: |
          {{hostname}}

    - name: Set root password
      user:
        name: root
        password: '{{rootpassword}}'

    - name: Install bootloader in BIOS mode
      shell:
        executable: /bin/bash
        cmd: 'grub-install --target=i386-pc {{diskdev}}'
      when: bootmode == 'bios'

    - name: Install bootloader in UEFI mode for Arch Linux
      shell:
        executable: /bin/bash
        cmd: |
          grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB --no-nvram --removable
      when: flavor == 'archlinux' and bootmode == 'uefi'

    - name: Install bootloader in UEFI mode for Debian
      shell:
        executable: /bin/bash
        cmd: |
          grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=debian --recheck --no-nvram --removable
      when: flavor == 'debian' and bootmode == 'uefi'

    - name: Generate GRUB config
      shell:
        executable: /bin/bash
        cmd: 'grub-mkconfig -o /boot/grub/grub.cfg'
      when: flavor == 'archlinux'

    - name: Enable networkmanager
      systemd_service:
        enabled: true
        name: NetworkManager

    - name: Enable ssh
      systemd_service:
        enabled: true
        name: "{{ 'sshd' if flavor == 'archlinux' else 'ssh' }}"

    - name: Template a file, using symbolic modes (equivalent to 0644)
      template:
        src: files/svrls-ansible-apply.sh.j2
        dest: /usr/local/sbin/svrls-ansible-apply.sh
        owner: root
        group: root
        mode: u=rwx,g=rx,o=r
